#!/usr/bin/env node

/**
 * Send Fresh Verification Email
 * 
 * This script sends a new verification email using the updated template system.
 * Run this after configuring the proper SendGrid template IDs in Railway.
 */

const fetch = require('node-fetch');

const API_URL = 'https://seoauditer-production.up.railway.app';
const TEST_EMAIL = 'nmang004@gmail.com';

async function sendFreshVerificationEmail() {
  console.log('üìß Sending Fresh Verification Email\n');
  
  try {
    console.log('1. Checking system health...');
    const healthResponse = await fetch(`${API_URL}/health`);
    const healthData = await healthResponse.json();
    console.log('‚úÖ Backend status:', healthData.status);
    
    // Check if admin endpoints are available
    console.log('\n2. Checking template system status...');
    try {
      const validationResponse = await fetch(`${API_URL}/api/admin/system-validation`);
      
      if (validationResponse.ok) {
        const validationData = await validationResponse.json();
        console.log('‚úÖ System validation available');
        console.log('Overall status:', validationData.validation?.passed ? '‚úÖ PASS' : '‚ùå FAIL');
        
        if (!validationData.validation?.passed) {
          console.log('\n‚ö†Ô∏è  System validation issues detected:');
          validationData.validation?.results?.forEach(result => {
            if (result.status !== 'pass') {
              console.log(`   ${result.status === 'fail' ? '‚ùå' : '‚ö†Ô∏è'} ${result.service}: ${result.message}`);
            }
          });
        }
      } else {
        console.log('‚ö†Ô∏è  Admin endpoints not yet available (deployment may still be in progress)');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è  Admin endpoints not accessible yet');
    }
    
    console.log('\n3. Sending verification email...');
    const emailResponse = await fetch(`${API_URL}/api/secure-auth/resend-verification`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: TEST_EMAIL
      })
    });
    
    const emailData = await emailResponse.json();
    
    if (emailData.success) {
      console.log('‚úÖ Verification email sent successfully!');
      console.log('üìß Check your inbox at:', TEST_EMAIL);
      console.log('üîó Correlation ID:', emailData.correlationId);
      
      if (emailData.tokenInfo) {
        console.log('üéØ Token info:');
        console.log('   - Token prefix:', emailData.tokenInfo.tokenPrefix);
        console.log('   - Expires at:', emailData.tokenInfo.expiresAt);
      }
      
    } else {
      console.log('‚ùå Verification email failed to send');
      console.log('Error:', emailData.error);
      console.log('Details:', emailData.details || 'No additional details');
      
      // Provide specific guidance based on error type
      if (emailData.error?.includes('template')) {
        console.log('\nüîß Template-related error detected.');
        console.log('This usually means:');
        console.log('1. SendGrid template ID is missing or invalid in Railway environment');
        console.log('2. Template format should be: d-xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx');
        console.log('3. Template doesn\'t exist in your SendGrid account');
        console.log('\nNext steps:');
        console.log('- Log into SendGrid Dashboard ‚Üí Email API ‚Üí Dynamic Templates');
        console.log('- Copy the correct template ID');
        console.log('- Update SENDGRID_VERIFICATION_TEMPLATE_ID in Railway environment');
      }
      
      if (emailData.error?.includes('from address') || emailData.error?.includes('sender')) {
        console.log('\nüîß Sender authentication error detected.');
        console.log('This usually means:');
        console.log('1. EMAIL_FROM_ADDRESS not set in Railway environment');
        console.log('2. From address not verified in SendGrid');
        console.log('\nNext steps:');
        console.log('- Go to SendGrid ‚Üí Settings ‚Üí Sender Authentication');
        console.log('- Verify admin@seodirector.co as a single sender');
        console.log('- Or set up domain authentication');
      }
      
      if (emailData.error?.includes('API key') || emailData.error?.includes('unauthorized')) {
        console.log('\nüîß API key error detected.');
        console.log('This usually means:');
        console.log('1. SENDGRID_API_KEY not set in Railway environment');
        console.log('2. API key is invalid or expired');
        console.log('\nNext steps:');
        console.log('- Check SendGrid ‚Üí Settings ‚Üí API Keys');
        console.log('- Generate new API key with Mail Send permissions');
        console.log('- Update SENDGRID_API_KEY in Railway environment');
      }
    }
    
    console.log('\nüìä Status Summary:');
    console.log('- Template management system: ‚úÖ Deployed');
    console.log('- Admin endpoints: ' + (validationResponse?.ok ? '‚úÖ Available' : '‚ö†Ô∏è  Deploying'));
    console.log('- Email sending: ' + (emailData.success ? '‚úÖ Working' : '‚ùå Needs configuration'));
    
  } catch (error) {
    console.error('‚ùå Script failed:', error.message);
    console.log('\nThis could be due to:');
    console.log('- Network connectivity issues');
    console.log('- Backend service down or redeploying');
    console.log('- Railway deployment still in progress');
  }
}

// Run the email sending test
sendFreshVerificationEmail().catch(console.error);
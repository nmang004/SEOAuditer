services:
  # Frontend Service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rival-outranker-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:8080
      - BACKEND_URL=http://backend:8080
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - rival-network

  # Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: rival-outranker-backend
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - PORT=8080
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/rival_outranker?schema=public
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your_super_long_jwt_secret_key_1234567890_change_this_in_production
      - JWT_ACCESS_EXPIRATION=1d
      - JWT_REFRESH_EXPIRATION=7d
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX=100
      - ALLOWED_ORIGINS=http://frontend:3000,http://localhost:3000
      - LOG_LEVEL=info
      - CLIENT_URL=http://frontend:3000
      - APP_URL=http://frontend:3000
      - API_URL=http://backend:8080
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - rival-network

  # Database Service
  postgres:
    image: postgres:15
    container_name: rival-outranker-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: rival_outranker
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - rival-network

  # Redis Service
  redis:
    image: redis:7
    container_name: rival-outranker-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - rival-network

# Volumes
volumes:
  pgdata:

# Networks
networks:
  rival-network:
    driver: bridge